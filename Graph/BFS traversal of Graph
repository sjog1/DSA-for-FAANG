class Solution {

    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> bfs = new ArrayList<>(); // Corrected ArrayList creation
        boolean vis[] = new boolean[V];            // Corrected boolean spelling
        Queue<Integer> q = new LinkedList<>();
        
        q.add(0); // Start BFS from node 0
        vis[0] = true;
        
        while (!q.isEmpty()) {
            Integer node = q.poll(); // Get the current node from the queue
            bfs.add(node);           // Add it to the BFS result list
            
            // Traverse all adjacent nodes
            for (Integer it : adj.get(node)) {
                if (!vis[it]) {       // If the adjacent node is unvisited
                    vis[it] = true;  // Mark it as visited
                    q.add(it);       // Add it to the queue
                }
            }
        }
        return bfs;
    }
}
