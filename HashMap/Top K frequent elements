class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
                     // Create a map mp, to store key-value pair, i.e. element-frequency pair.
        Map<Integer, Integer> map = new HashMap<>();
        for(int num : nums){ map.put(num, map.getOrDefault(num, 0) + 1); }
                        // Store the element-frequency pair in a Priority Queue (Max Heap)
        Queue<Integer> heap = new PriorityQueue<>((a, b) -> map.get(b) - map.get(a));
        for(int key : map.keySet())
        { heap.add(key); }    
                     // Poll top k frequent elements off the Heap
        List<Integer> ans = new ArrayList<>();                          
        for(int i = 0; i < k; i++){
            ans.add(heap.poll());
        }
        
        return ans;
    }
}
//There are N elements in the Heap and we call poll() K times = O(K log N) 
//https://leetcode.com/problems/top-k-frequent-elements/solutions/350472/easy-simple-java-solution-for-interviews-heap-hashmap/ 
