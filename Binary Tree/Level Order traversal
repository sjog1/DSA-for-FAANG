import java.util.*;

public class Level_order_traversal {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Node root = new Node(100);
		root.left = new Node(20);
		root.right = new Node(200);
		root.left.left = new Node(10);
		root.left.right = new Node(30);
		root.left.right.left = new Node(40);
		root.right.left = new Node(150);	
		//          100
		//     20          200
		//   10   30     150 
		//          40
		// Result : [[100], [20, 200], [10, 30, 150], [40]]
		List<List<Integer>> result = levelOrder(root);
		System.out.print(result);
	}

	public static List<List<Integer>> levelOrder(Node root) {
		List<List<Integer>> res = new ArrayList<>();
		//No need to perform any logic if root itself of the tree is null
		if (root == null)
			return res;
		
		Queue<Node> q = new LinkedList<Node>();
		q.add(root);
		while(!q.isEmpty()) {
			int levelSize = q.size();
			//This list holds values of all nodes in current level
			List<Integer> currLevel = new ArrayList<>();
			//Use for loop to create list of current level nodes and push their childs into queue
			for(int i = 0; i < levelSize; i++) {
				Node currNode = q.poll();
				//Create a arraylist of node values for current level
				currLevel.add(currNode.data);
				//Add left and right nodes in queue for next for loop consideration
				if (currNode.left != null)
					q.add(currNode.left);
				if (currNode.right != null)
					q.add(currNode.right);
			}
			//Add the current level arraylist in the final result list
			res.add(currLevel);
		}
		return res;
	}
	
}
