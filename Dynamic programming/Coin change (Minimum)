int coinCount(int[] coins, int amount) {
    // Base case: no coins needed to make 0
    if (amount == 0) {
        return 0;
    }

    // Invalid case: negative amount can't be formed
    if (amount < 0) {
        return Integer.MAX_VALUE;
    }

    // Memoization: return cached result if available
    if (dp[amount] != -1) {
        return dp[amount];
    }

    int minCoins = Integer.MAX_VALUE;

    // Try every coin and take the minimum
    for (int i = 0; i < coins.length; i++) {
        int ans = coinCount(coins, amount - coins[i]);
        if (ans != Integer.MAX_VALUE) {
            minCoins = Math.min(minCoins, 1 + ans);
        }
    }

    // Cache and return the result
    return dp[amount] = minCoins;
}
