public class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();

        // Create a memoization table initialized to -1
        // memo[i][j] will store the LCS length of text1[0..i-1] and text2[0..j-1]
        int[][] memo = new int[m + 1][n + 1];
        for (int[] row : memo) {
            Arrays.fill(row, -1);
        }

        // Start the recursive LCS computation
        return lcsMemo(text1, text2, m, n, memo);
    }

    // Recursive helper function with memoization
    private int lcsMemo(String text1, String text2, int m, int n, int[][] memo) {
        // Base case: if either string is empty, LCS is 0
        if (m == 0 || n == 0) {
            return 0;
        }

        // If result is already computed, return it
        if (memo[m][n] != -1) {
            return memo[m][n];
        }

        // If last characters match, include it in LCS and recurse on remaining strings
        if (text1.charAt(m - 1) == text2.charAt(n - 1)) {
            memo[m][n] = 1 + lcsMemo(text1, text2, m - 1, n - 1, memo);
        } else {
            // If last characters don't match, take the max LCS by excluding one character from either string
            memo[m][n] = Math.max(
                lcsMemo(text1, text2, m - 1, n, memo),
                lcsMemo(text1, text2, m, n - 1, memo)
            );
        }

        // Return the computed value
        return memo[m][n];
    }
}
